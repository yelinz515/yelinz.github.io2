{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-07-13-JavaScript-Koans-post.md/","result":{"data":{"site":{"siteMetadata":{"title":"FE Yerin Blog"}},"markdownRemark":{"id":"111e6d97-3acf-5f29-b4dd-811b21a11e4f","excerpt":"JavaScript koans를 풀었던 과정과 새롭게 알게 된 것😄 01_Introduction.js ✨ expect 함수 테스트하는 값과 기대값을 비교 04_Scope.js ✨ 함수 선언식(declaration)과 함수 표현식(expression…","html":"<h1>JavaScript koans를 풀었던 과정과 새롭게 알게 된 것😄</h1>\n<h2>01_Introduction.js</h2>\n<p>✨ <strong>expect</strong> 함수</p>\n<blockquote>\n<p><strong>테스트하는 값과 기대값을 비교</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'sum(1, 2)의 결과값은 3과 같아야(equal) 한다'</span></code></pre></div>\n<br>\n<h2>04_Scope.js</h2>\n<p>✨ 함수 선언식(declaration)과 함수 표현식(expression)의 차이</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">funcDeclared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'this is a function declaration'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> funDeclared<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'function'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">funcExpressed</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'this is a function expression'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> funExpressed<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'string'</span></code></pre></div>\n<p>✨ 자바스크립트 함수 호이스팅(hoisting)</p>\n<blockquote>\n<p><strong>인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것</strong></p>\n</blockquote>\n<p>“변수의 선언과 초기화를 분리한 후, 선언만 코드의 최상단으로 옮기는 것” 이라고 주로 설명할 수 있다.</p>\n<p>✨ lexical scope\n자바스크립트는 함수가 호출되는 환경와 별개로, 기존에 선언되어 있던 환경 - 어휘적 환경 - 을 기준으로 변수를 조회하려고 함.</p>\n<br>\n<h2>05_ArrowFunction.js</h2>\n<p>✨ 화살표 함수 사용법</p>\n<ul>\n<li>function 키워드를 생략하고 화살표 => 를 붙인다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>리턴을 생략할 수 있습니다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subtract</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">-</span> y</code></pre></div>\n<h3>💡 원본 변경 메서드 vs 간접 변경 메서드</h3>\n<h3>1. 원본 변경 메서드</h3>\n<ul>\n<li>push()</li>\n<li>pop()</li>\n<li>shift()</li>\n<li>unshift()</li>\n<li>splice()</li>\n</ul>\n<h3>2. 간접 변경 메서드</h3>\n<ul>\n<li>slice() // slice(0) === slice()</li>\n<li>concat()</li>\n<li>join()</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'zero'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'four'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'five'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> copiedArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    copiedArr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'changed in copiedArr'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'three'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//원본 변경이 아닌 간접 변경!</span></code></pre></div>\n<p>slice() 메서드가 간접 변경 메서드이기 때문에 원본이 변경 되지 않는다.\n따라서, ‘changed in copiedArr’가 아닌 ‘three’가 정답이다.</p>\n<br>\n<h2>06_Types-part2.js</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">===</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">//false</span></code></pre></div>\n<p>참조 자료형인 배열, 객체, 함수는 주소를 변수에 할당하기 때문에 우리가 보기에 요소가 같더라도 실제로 heap에 저장되어 있는 값은 다르다는 것이다.\n이 부분에 대해 배우지 않았다면, 위 코드가 왜 틀렸는지 몰랐을 것이다.</p>\n<br>\n<h2>08_Object.js</h2>\n<p>✨ <strong>깊은 복사와 얕은 복사</strong></p>\n<ul>\n<li><strong>Array.prototype.slice</strong> : 배열을 깔끔하게 복사할 때 사용.</li>\n</ul>\n<p>start와 end가 주어지지 않으면 전체 배열을 복사한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> copyArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">checker</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> copyArr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span>\n<span class=\"token function\">checker</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> copyArr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></code></pre></div>\n<p>단점은..\n<strong>중첩 구조 복사를 제대로 수행할 수 없다</strong>.\n원본과 복사본 모두 영향을 받기 때문에 <strong>얕은 복사</strong>를 수행한다. 따라서, 모든 값을 독립적으로 복사할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> copyArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">checker</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> copyArr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span>\n<span class=\"token function\">checker</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> copyArr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span></code></pre></div>\n<ul>\n<li><strong>Object.assign()</strong> : 객체를 복사할 때 사용.</li>\n</ul>\n<p>메서드의 첫번째 인수로 빈 객체를 넣어주며, 두번째 인수로 할당할 객체를 넣으면 된다.\n열거할 수 있는 하나 이상의 출처 객체로부터 대상 객체로 속성을 복사할 때 사용합니다. 대상 객체를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> game <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">AOS</span><span class=\"token operator\">:</span> <span class=\"token string\">\"League of Legend\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> game2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">Sim</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DCS Worlds\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> game3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">VR</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Half-Life: Alyx\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myGames <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span> game2<span class=\"token punctuation\">,</span> game3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyGames <span class=\"token comment\">// {AOS: \"League of Legend\", Sim: \"DCS Worlds\", VR: \"Half-Life: Alyx\"}</span></code></pre></div>\n<p>단점은..\n<strong>2차원 객체는 깊은 복사가 이루어지지 않는다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnewObj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 1, b: { c: 3 } }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c <span class=\"token operator\">===</span> newObj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 전개 연산자</span>\n<span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nnewObj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 1, b: { c: 3 } }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c <span class=\"token operator\">===</span> newObj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>전개 연산자를 활용해도 2차원 객체는 얕은 복사가 되는 것을 확인할 수 있다.</p>\n<br>\n<blockquote>\n<p><strong>정리</strong></p>\n</blockquote>\n<p>✔️ 자바스크립트 핵심 개념과 주요 문법에 대해 이해할 수 있었다.</p>\n<p>✔️ 복습하며 완벽하게 아는 것이 중요하다.</p>","frontmatter":{"title":"JavaScript Koans","date":"July 13, 2022","description":null}},"previous":{"fields":{"slug":"/2022-07-12-post.md/"},"frontmatter":{"title":"[4주차] 보이는 라디오 - 2일차"}},"next":{"fields":{"slug":"/2022-07-13-post.md/"},"frontmatter":{"title":"[4주차] [JavaScript] 핵심 개념과 주요 문법 - 3일차"}}},"pageContext":{"id":"111e6d97-3acf-5f29-b4dd-811b21a11e4f","previousPostId":"b1c5cca2-8ac9-51d8-b578-94311098f13f","nextPostId":"a22fe6e3-994c-50d6-aa3e-5947ab0d7f18"}},"staticQueryHashes":["2841359383","3257411868"]}