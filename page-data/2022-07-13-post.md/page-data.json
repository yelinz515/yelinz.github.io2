{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-07-13-post.md/","result":{"data":{"site":{"siteMetadata":{"title":"FE Yerin Blog"}},"markdownRemark":{"id":"a22fe6e3-994c-50d6-aa3e-5947ab0d7f18","excerpt":"✨ 스코프 : 변수 접근 규칙에 따른 유효 범위 1. firstName 변수가 함수 안쪽 정의 :arrow_right: 함수 바깥쪽에서 firstName으로 접근 불가능 (=ReferenceError…","html":"<h3>✨ 스코프</h3>\n<blockquote>\n<p>: <strong>변수 접근 규칙에 따른 유효 범위</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greetSomeone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">'Josh'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> greeting <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> firstName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>1. firstName 변수가 함수 안쪽 정의 :arrow_right: 함수 바깥쪽에서 firstName으로 접근 불가능 (=ReferenceError)</strong></p>\n<ul>\n<li>바깥쪽 스코프에서 선언한 변수는 안쪽 스코프에서 사용 가능</li>\n<li>안쪽에서 선언한 변수는 바깥쪽 스포크에서 사용 불가능</li>\n</ul>\n<p><strong>2. 중첩 가능</strong></p>\n<p>“지역 변수는 전역 변수보다 더 높은 우선순위를 가진다”</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'김코딩'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'박해커'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 '박해커'</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 '김코딩'</span>\n<span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 '김코딩'</span></code></pre></div>\n<p>2️번 출력에서 ‘김코딩’이 나오는 이유는 지역 name 변수를 새로 선언했기 때문에 전역에 있는 name 변수와는 다르다.</p>\n<p>만약,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'김코딩'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">'박해커'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 '박해커'</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1 '김코딩'</span>\n<span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 3 '박해커'</span></code></pre></div>\n<p>지역 name 변수를 새로 선언하지 않았다면 전역 name 변수와 같은 변수이기 때문에 ‘김코딩’ 에서 ‘박해커’로 변경된다.\n따라서, 3번 출력은 ‘박해커’가 된다.</p>\n<h3>✨  스코프의 종류</h3>\n<blockquote>\n<p>: <strong>블록 스코프, 함수 스코프</strong></p>\n</blockquote>\n<p>🔹 화살표 함수는 블록 스코프로 취급된다.</p>\n<p>🔹 <strong>var키워드</strong>_\n블록 스코프에서 block 범위를 벗어나도 같은 function scope에서는 사용이 가능하다.\n따라서, var 보다는 let 으로 변수 선언을 하는 것을 권장한다.</p>\n<br>\n<hr>\n<h3>✨ 클로저</h3>\n<blockquote>\n<p>: <strong>함수를 리턴하는 함수</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✅ 내부 함수는 외부 함수에 선언된 변수에 접근 가능</p>\n<p>✅ 클로저는 <strong>모듈화</strong>에 유리</p>\n<br>\n<hr>\n<h3>✨ ES6 신규 문법</h3>\n<h4>1.1. spread 문법</h4>\n<p>주로 배열을 풀어서 인자로 전달 or 배열을 풀어서 각각의 요소로 넣을 때 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// spread 문법</span></code></pre></div>\n<h4>1.2. rest 문법</h4>\n<p>파라미터를 배열의 형태로 받아서 사용 (파라미터 개수가 가변적일 때 유용!)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>theArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// rest 문법</span>\n  <span class=\"token keyword\">return</span> theArgs<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previous<span class=\"token punctuation\">,</span> current</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> previous <span class=\"token operator\">+</span> current<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>2. 구조분해할당</h4>\n<blockquote>\n<p>: spread 문법을 이용하여 값을 해체 -> 개별 값을 변수에 새로 할당</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'states'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'pre'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token string\">'course'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'student'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<p>…arr처럼 spread 문법을 이용해 값을 해체한다.\n…[‘course’, ‘student’]도 마찬가지이다.</p>\n<p>결과적으로, 아래와 같은 값이 나오게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'states'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pre'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'course'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'student'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br>\n<blockquote>\n<p><strong>정리</strong></p>\n</blockquote>\n<p>✔️ 스코프의 의미와 적용 범위를 이해한다.</p>\n<p>✔️ 스코프의 주요 규칙을 이해한다.</p>\n<p>✔️ 전역 스코프와 지역 스코프의 차이를 이해한다.</p>\n<p>✔️ 클로저 함수의 정의와 특징에 대해서 이해할 수 있다.</p>\n<p>✔️ spread/rest 문법을 사용할 수 있다.</p>\n<p>✔️ 구조 분해 할당을 사용할 수 있다.</p>\n<p>👍👍👍</p>\n<p><strong>✨ JavaScript Koans에 대해서는 다른 포스트에 정리해두었습니다.</strong></p>","frontmatter":{"title":"[4주차] [JavaScript] 핵심 개념과 주요 문법 - 3일차","date":"July 13, 2022","description":null}},"previous":{"fields":{"slug":"/2022-07-13-JavaScript-Koans-post.md/"},"frontmatter":{"title":"JavaScript Koans"}},"next":{"fields":{"slug":"/2022-07-14-post.md/"},"frontmatter":{"title":"[4주차] [JS/브라우저] DOM - 4일차"}}},"pageContext":{"id":"a22fe6e3-994c-50d6-aa3e-5947ab0d7f18","previousPostId":"111e6d97-3acf-5f29-b4dd-811b21a11e4f","nextPostId":"a3a99a19-9620-5402-9472-b6cd5f11b013"}},"staticQueryHashes":["2841359383","3257411868"]}