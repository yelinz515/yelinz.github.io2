{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-07-21-post.md/","result":{"data":{"site":{"siteMetadata":{"title":"FE Yerin Blog"}},"markdownRemark":{"id":"43a163a3-57f1-5e32-aba1-5b7ff6087830","excerpt":"고차 함수 오늘 공부한 내용 어려웠던 내용 궁금한 내용과 부족한 내용  느낀점 ✨  오늘 공부한 내용 고차 함수 함수를 리턴하는 함수, 함수를 전달인자로 받는 함수(=커링 함수) 이때\n다른 함수의 전달인자로 전달되는 함수 : 콜백 함수(callback function…","html":"<h3>고차 함수</h3>\n<ul>\n<li>오늘 공부한 내용</li>\n<li>어려웠던 내용</li>\n<li>궁금한 내용과 부족한 내용 </li>\n<li>느낀점</li>\n</ul>\n<hr>\n<h3>✨  오늘 공부한 내용</h3>\n<h4>고차 함수</h4>\n<blockquote>\n<p><strong>함수를 리턴하는 함수, 함수를 전달인자로 받는 함수(=커링 함수)</strong></p>\n</blockquote>\n<p>이때\n다른 함수의 전달인자로 전달되는 함수 : <strong>콜백 함수(callback function)</strong></p>\n<ul>\n<li>콜백 함수를 전달받은 고차 함수는, 함수 내부에서 이 콜백 함수를 호출할 수 있다.</li>\n<li>아예 호출하지 않을 수도 있고, 여러 번 실행할 수 있다.</li>\n</ul>\n<br>\n<p><strong>📍 for…of vs for…in</strong></p>\n<ul>\n<li>for…of : 반복가능한 객체 (Array, Map, Set, String, TypedArray, arguments 객체 등을 포함)에 대해서 반복</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>    </code></pre></div>\n<p>위처럼 쓰지 않아도 아래 코드로 쓰면 대입받은 변수를 이용하면 루프 안에서 객체의 열거할 수 있는 프로퍼티에 순차적으로 접근할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>variable <span class=\"token keyword\">of</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  statement\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<ul>\n<li>for…in :  객체에서 문자열로 키가 지정된 모든 열거 가능한 속성에 대해 반복</li>\n</ul>\n<p>자세한 내용은 아래 링크를 눌러주세요!\n출처 : <a href=\"https://yjshin.tistory.com/entry/JavaScript-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-for-%EB%AC%B8-for-in-%EB%AC%B8-for-of-%EB%AC%B8\">YJUN IT BLOG:티스토리</a>.</p>\n<br>\n<h4>내장 고차 함수</h4>\n<h4>filter</h4>\n<blockquote>\n<p><strong>주어진 함수의 테스트를 통과하는 모든 요소를 모아 새로운 배열로 반환합니다.</strong></p>\n</blockquote>\n<h4>map</h4>\n<blockquote>\n<p><strong>배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환합니다</strong></p>\n</blockquote>\n<h4>reduce</h4>\n<blockquote>\n<p><strong>배열의 각 요소에 대해 주어진 리듀서(reducer) 함수를 실행하고, 하나의 결과값을 반환합니다.</strong></p>\n</blockquote>\n<p><strong>📍 리듀서 함수는 네 개의 인자를 가집니다.</strong></p>\n<ul>\n<li>누산기 (acc)</li>\n<li>현재 값 (cur)</li>\n<li>현재 인덱스 (idx)</li>\n<li>원본 배열 (src)</li>\n</ul>\n<p>리듀서 함수의 반환 값은 <strong>누산기에 할당</strong>되고, 누산기는 순회 중 유지되므로 결국 최종 결과는 <strong>하나의 값</strong>이 됩니다</p>\n<br>\n<h3>✨  어려웠던 내용</h3>\n<p>고차 함수 코플릿 몇 문제가 어려웠다.</p>\n<br>\n<h3>✨  부족한 내용</h3>\n<p>내장 고차 함수 대표 3가지인 filter, map, reduce를 자주 연습해야겠다.\n하다보면 익숙해질 것이다.</p>\n<h4>✅ 4.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">calcuate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">plus</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> z\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 함수를 전달인자로 받지 않고 있고, 함수를 리턴하고 있지 않아서 고차함수가 아니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>위 코드처럼 함수를 전달인자로 받지 않아도 함수를 리턴하기 때문에 고차함수이다.</p>\n<h4>✅ 8.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">summary</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> acc <span class=\"token operator\">+</span> cur <span class=\"token operator\">+</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'미들웨어를 통해 강력한 API를 작성할 수 있다.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'HTTP 유틸리티 메소드를 제공한다.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'NestJs는 Express 기반이다.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Express는 OpenJS 기반의 프로젝트이다.'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>summary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>지금 reduce 메서드를 통해 함수를 접근하고 있는데, 두 번째 전달인자에 초기값이 주어지지 않아 배열 contents의 첫 번째 요쇼인 ‘미들웨어를 통해 강력한 API를 작성할 수 있다.’ 가 리턴된다.</p>","frontmatter":{"title":"[5주차] [JavaScript] 고차 함수 - 4일차","date":"July 21, 2022","description":null}},"previous":{"fields":{"slug":"/2022-07-20-section1-post.md/"},"frontmatter":{"title":"Section1 회고"}},"next":{"fields":{"slug":"/2022-07-22-post.md/"},"frontmatter":{"title":"[5주차] [JavaScript] TODAY 블로깅 - 5일차"}}},"pageContext":{"id":"43a163a3-57f1-5e32-aba1-5b7ff6087830","previousPostId":"7ed11c1a-ac07-5462-b666-406f9a282a81","nextPostId":"a8d3d5be-dd1c-5663-98e5-8fc7a306b9a6"}},"staticQueryHashes":["2841359383","3257411868"]}