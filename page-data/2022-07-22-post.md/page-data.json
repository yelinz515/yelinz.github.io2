{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-07-22-post.md/","result":{"data":{"site":{"siteMetadata":{"title":"FE Yerin Blog"}},"markdownRemark":{"id":"a8d3d5be-dd1c-5663-98e5-8fc7a306b9a6","excerpt":"객체 지향 개요 데이터와 기능을 한곳에 묶어서 처리 클래스라는 이름으로 속성과 메서드가 하나의 “객체”라는 개념에 포함 예시 위 코드에서 객체 man은 name과 favorite 속성이 있고, favorite 속성은 함수 자료형이므로 favorite() 메서드라고 부른다. this…","html":"<h3>객체 지향 개요</h3>\n<blockquote>\n<p>데이터와 기능을 한곳에 묶어서 처리</p>\n</blockquote>\n<blockquote>\n<p><strong>클래스</strong>라는 이름으로 <strong>속성과 메서드가 하나의 “객체”라는 개념에 포함</strong></p>\n</blockquote>\n<h4>예시</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> man <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Kurien'</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">favorite</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">thing</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'은(는) '</span> <span class=\"token operator\">+</span> thing <span class=\"token operator\">+</span> <span class=\"token string\">'을(를) 좋아합니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드에서 객체 man은 name과 favorite 속성이 있고, favorite 속성은 함수 자료형이므로 favorite() 메서드라고 부른다.</p>\n<p>this.name은 메서드 내에서 자기 자신이 가진 속성을 출력하기 위해서 사용되는데, 같은 man 객체에 존재하는 name을 불러온다는 뜻이다.</p>\n<p>코드를 실행하게 되면 Kurien은(는) 게임을(를) 좋아합니다.라는 문장이 출력됩니다.</p>\n<p>메서드 - “객체에 딸린 함수”\nthis - “인스턴스 객체”</p>\n<br>\n<hr>\n<br>\n<ul>\n<li>클래스</li>\n<li>인스턴스</li>\n<li>new 키워드</li>\n<li>생성자 함수</li>\n<li>ES5 클래스 작성 문법</li>\n<li>ES6 클래스 작성 문법</li>\n</ul>\n<h3>클래스와 인스턴스</h3>\n<p><img src=\"/9cc879869389327db1d130bbb666f1bf/clin.png\" alt=\"Chinese Salty Egg\"></p>\n<h3>new 키워드</h3>\n<blockquote>\n<p>인스턴스를 만들 때 new 키워드를 사용</p>\n</blockquote>\n<p>즉시 생성자 함수가 실행된다.\n각각의 인스턴스는 클래스이 고유한 속성과 메서드를 갖게 된다.</p>\n<h3>생성자 함수</h3>\n<blockquote>\n<p>객체지향 프로그래밍에서 인스턴스가 만들어질 때 실행되는 코드</p>\n</blockquote>\n<p>참고로 생성자 함수는 return 값을 만들지 않는다.</p>\n<p>(아래 그림에서 constructor 함수를 볼 수 있다)</p>\n<h3>ES5 클래스 작성 문법, ES6 클래스 작성 문법</h3>\n<p><img src=\"/7d0354c6b8fa133a0a0d47ea2f08b097/es56.png\" alt=\"Chinese Salty Egg\"></p>\n<p>ES5는 prototype이라는 키워드를 사용해야 메서드를 정의할 수 있습니다. Car 클래스에 메서드를 추가하기 위해서는 <code class=\"language-text\">Car.prototype.refuel</code>과 같이 <code class=\"language-text\">prototype</code>을 이용해야 한다.</p>\n<p>ES6에서는 생성자 함수와 함께 class 키워드 안쪽에 묶어서 정의합니다. <code class=\"language-text\">refuel() {}</code>, drive() {}`와 같이 작성되어 있는 부분이다.</p>\n<h4>✔️ 정리</h4>\n<ul>\n<li>객체 : 클래스, 인스턴스, 속성을 포함</li>\n<li>클래스 : 세부 사항(속성)이 들어가지 않은 청사진</li>\n<li>인스턴스 : 클래스를 통해 만들어진 객체</li>\n<li>생성자 : 생성자를 통해 세부 사항(속성) 넣기</li>\n</ul>\n<br>\n<hr>\n<br>\n<ul>\n<li>객체 지향 프로그래밍</li>\n<li>캡슐화</li>\n<li>추상화</li>\n<li>상속</li>\n<li>다형성</li>\n</ul>\n<h3>객체 지향 프로그래밍</h3>\n<blockquote>\n<p>자바스크립트는 엄밀히 말해 객체 지향 언어는 아니지만, <strong>객체 지향 패턴을 작성 가능</strong></p>\n</blockquote>\n<p>✅ 객체 지향 프로그래밍의 주요 개념</p>\n<blockquote>\n<p>캡슐화, 상속, 추상화, 다형성</p>\n</blockquote>\n<h3>캡슐화</h3>\n<blockquote>\n<p>데이터와 기능을 <strong>느슨하게</strong> 결합</p>\n</blockquote>\n<h3>추상화</h3>\n<blockquote>\n<p>내부 구현은 복잡해도 실제 노출되는 부분은 <strong>단순하게</strong> 만든다는 개념</p>\n</blockquote>\n<h3>상속</h3>\n<blockquote>\n<p>기본 클래스(base class)의 특징을 파생 클래스(derived class)가 상속</p>\n</blockquote>\n<h3>다형성</h3>\n<blockquote>\n<p><strong>다양한 형태.</strong></p>\n</blockquote>\n<blockquote>\n<p>예를 들어, 동물들이 말할 때 제각각 소리를 내는 것처럼, <strong>객체 역시 똑같은 메서드라 하더라도, 다른 방식으로 구현될 수 있다.</strong></p>\n</blockquote>\n<h4>✔️ 정리</h4>\n<p>🔹 캡슐화는 코드가 복잡하지 않게 만들고, 재사용성을 높입니다.</p>\n<p>🔹 추상화는 마찬가지로 코드가 복잡하지 않게 만들고, 단순화된 사용으로 변화에 대한 영향을 최소화합니다.</p>\n<p>🔹 상속 역시 불필요한 코드를 줄여 재사용성을 높입니다.</p>\n<p>🔹 다형성으로 인해 동일한 메서드에 대해 if/else if와 같은 조건문 대신 객체의 특성에 맞게 달리 작성하는 것이 가능해집니다.</p>\n<br>\n<hr>\n<br>\n<ul>\n<li>프로토타입</li>\n<li>.prototype</li>\n<li>.__ proto __</li>\n<li>클래스, 인스턴스, 프로토타입의 관계</li>\n</ul>\n<h3>프로토타입</h3>\n<p>JavaScript는 프로토타입 기반 언어이다.</p>\n<h3>.prototype</h3>\n<ul>\n<li>Object.prototype.constructor : 개체의 프로토타입을 만드는 함수를 지정</li>\n</ul>\n<p>실제 출력 값을 보면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">은 잠에 들었습니다</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Human.prototype.constructor === Human;을 출력했을 때와 동일한 결과를 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">은 잠에 들었습니다</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> kimcoding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">(</span><span class=\"token string\">'김코딩'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 보면  Human 클래스의 인스턴스인 kimcoding을 볼 수 있다.</p>\n<ul>\n<li>Kimcoding.__ proto __ : 개체가 인스턴스화될때 프로토타입으로 사용된 개체를 가리킨다.</li>\n</ul>\n<p>Human.prototype === kimcoding.__ proto __; 을 출력했을 때와 동일한 결과를 얻을 수 있다.</p>\n<h3>.__ proto __</h3>\n<blockquote>\n<p>접근하고자 하는 객체의 내부 속성인 [  [ Prototype ]  ](객체 또는 null)를 노출하는 접근자 속성(getter 및 setter 함수)이다.</p>\n</blockquote>\n<p>__ proto __ 속성은 getter 및 setter 함수로 구성된 Object.prototype (en-US)의 간단한 접근자 속성이다.</p>\n<br>\n<p>☑️ <strong>프로토타입 체인 블로깅</strong>은 다음 포스트에 올리도록 하겠습니다.</p>","frontmatter":{"title":"[5주차] [JavaScript] TODAY 블로깅 - 5일차","date":"July 22, 2022","description":null}},"previous":{"fields":{"slug":"/2022-07-21-post.md/"},"frontmatter":{"title":"[5주차] [JavaScript] 고차 함수 - 4일차"}},"next":{"fields":{"slug":"/2022-07-25-post.md/"},"frontmatter":{"title":"[6주차] [JavaScript] 프로토타입 체인 - 1일차"}}},"pageContext":{"id":"a8d3d5be-dd1c-5663-98e5-8fc7a306b9a6","previousPostId":"43a163a3-57f1-5e32-aba1-5b7ff6087830","nextPostId":"8f679b74-4b49-5d16-8b34-0e63fb372300"}},"staticQueryHashes":["2841359383","3257411868"]}