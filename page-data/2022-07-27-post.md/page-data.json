{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-07-27-post.md/","result":{"data":{"site":{"siteMetadata":{"title":"FE Yerin Blog"}},"markdownRemark":{"id":"d35c3cea-8112-5e1a-9835-413630a549f6","excerpt":"Callback Async 제어 다른 함수에 인수로 전달된 함수이며 외부 함수 내부에서 호출되어 일종의 루틴이나 작업을 완료 Promise callback의 가독성을 높이기 위해 Promise 객체를 사용한다. Promise…","html":"<h3>Callback</h3>\n<blockquote>\n<p>Async 제어</p>\n</blockquote>\n<blockquote>\n<p>다른 함수에 인수로 전달된 함수이며 외부 함수 내부에서 호출되어 일종의 루틴이나 작업을 완료</p>\n</blockquote>\n<h3>Promise</h3>\n<p>callback의 가독성을 높이기 위해 Promise 객체를 사용한다.</p>\n<blockquote>\n<p>Promise 객체는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타낸다.</p>\n</blockquote>\n<h4>✔️ Promise의 세가지 상태</h4>\n<ul>\n<li>대기(pending): 이행하지도, 거부하지도 않은 초기 상태.</li>\n<li>이행(fulfilled): 연산이 성공적으로 완료됨.</li>\n<li>거부(rejected): 연산이 실패함.</li>\n</ul>\n<p><img src=\"/07f4edf6e574875fa8ab5e38f941fb85/promisemap.png\" alt=\"Chinese Salty Egg\"></p>\n<p>그림을 보면 <code class=\"language-text\">Promise.prototype.then()</code>과 <code class=\"language-text\">Promise.prototype.catch()</code>가 있다.</p>\n<h4>Promise.prototype.then()</h4>\n<blockquote>\n<p><code class=\"language-text\">then()</code> 메서드는 Promise (en-US)를 리턴하고 두 개의 콜백 함수를 인수로 받는다.</p>\n</blockquote>\n<blockquote>\n<p><strong>Promise가 이행했을 때, 다른 하나는 거부했을 때를 위한 콜백 함수이다</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onFulfilled<span class=\"token punctuation\">,</span> onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\np<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 이행</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 거부</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Promise.prototype.catch()</h4>\n<blockquote>\n<p>Promise 거부된 사례만 반환하고 처리</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">promise1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h3>async await</h3>\n<blockquote>\n<p>Promise이지만 외부적으로 보이는 모습이 다른 형태이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resetTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">playVideo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//await 사용</span>\n  <span class=\"token function\">pauseVideo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">displayTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">highlightTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">resetTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">function</code> 키워드 앞에 <code class=\"language-text\">async</code>만 붙여주면 되고 비동기로 처리되는 부분 앞에 <code class=\"language-text\">await</code>만 붙여주면 된다.</p>\n<p><strong>다만, 몇 가지 주의할 점이 있다면</strong>\n(1) <code class=\"language-text\">await</code> 뒷부분이 반드시 promise 를 반환해야 한다는 것과\n(2) async function 자체도 promise 를 반환한다는 것이다.</p>\n<br>\n<hr>\n<h3>타이머 API 과제 하면서</h3>\n<h4>Function.prototype.bind()</h4>\n<blockquote>\n<p>bind() 메소드가 호출되면 새로운 함수를 생성</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<hr>\n<h3>Node.js</h3>\n<p>Node.js 에서는 JavaScript 코드 가장 상단에 require 구문을 이용하여 다른 파일을 불러온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 파일 시스템 모듈을 불러옵니다</span>\n<span class=\"token keyword\">const</span> dns <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dns'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DNS 모듈을 불러옵니다</span></code></pre></div>\n<h4>fs.readFile(path[, options], callback)</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>☑️ <strong>프로토타입 체인 블로깅</strong>은 다음 포스트에 올리도록 하겠습니다:)</p>\n<br>\n<br>\n<blockquote>\n<h3>선배적 참견 시점 👀</h3>\n</blockquote>\n<h4>“개발 세계는 숲이고, 개발자는 나무꾼과 같다.”</h4>\n<p>오픈소스처럼 우리가 성장할 수 있도록 아낌없이 재료를 나눠준다라는 뜻에서 말씀하신 것 같다.</p>\n<p>코드스테이츠에서 배우지 않은 것들로 회사에서 개발해야한다면 차피 Next.js, React Native도 자바스크립트 기반이기 때문에 조금만 공부하면 할 수 있다!</p>\n<p>공부하면서 취준하면서 시간이 있다면 <strong>사이트를 제작</strong>하거나 <em>자기계발</em>하면 좋다.</p>\n<h4>조언</h4>\n<p>❤️ git을 마스터해라!\n❤️ 블로깅을 꾸준히해라!\n❤️ 내가 짠 코드는 기록해라!</p>\n<p>🚫 눈코딩 금지\n🚫 혼자서만 개발하지 말기(동료들에게 질문, 스터디 이용)</p>\n<p><strong>꾸준히 자기주도적 학습을 하고 새롭게 알게 된 내용을 바탕으로 TIL를 작성하겠습니다.</strong> 😊</p>","frontmatter":{"title":"[6주차] [JS/Node] 비동기 / 선배적 참견 시점 - 3일차","date":"July 27, 2022","description":null}},"previous":{"fields":{"slug":"/2022-07-26-post.md/"},"frontmatter":{"title":"[6주차] underbar - 2일차"}},"next":{"fields":{"slug":"/2022-07-28-post.md/"},"frontmatter":{"title":"Unit 3 회고"}}},"pageContext":{"id":"d35c3cea-8112-5e1a-9835-413630a549f6","previousPostId":"bcbd3a66-c388-5b2d-9305-6b3a016848a8","nextPostId":"0cd8bf89-6884-5f1d-ab35-40d666bb2560"}},"staticQueryHashes":["2841359383","3257411868"]}