{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-07-29-post.md/","result":{"data":{"site":{"siteMetadata":{"title":"FE Yerin Blog"}},"markdownRemark":{"id":"373e758a-633a-549c-8ba9-754a2c462ca5","excerpt":"React 프론트엔드 개발을 위한 자바스크립트 오픈소스 라이브러리 라이브러리 : 다른 프로그램에서 호출하여 사용할 수 있도록 제공하는 일종의 함수 집합 리액트를 쓰는 이유에 3가지 특징이 있다. 선언형 html, css, js…","html":"<h3>React</h3>\n<blockquote>\n<p><strong>프론트엔드 개발을 위한 자바스크립트 오픈소스 라이브러리</strong></p>\n</blockquote>\n<ul>\n<li>라이브러리 : 다른 프로그램에서 호출하여 사용할 수 있도록 제공하는 일종의 함수 집합</li>\n</ul>\n<p>리액트를 쓰는 이유에 3가지 특징이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">🔹 선언형\n🔹 컴포넌트 기반\n🔹 범용성</code></pre></div>\n<h4>선언형</h4>\n<p>html, css, js 파일을 각각 적는 것은 불편하다. 리액트는 다른 기술을 한 곳에 볼 수 있어 개발자가 코드만 보고도 실제 기능을 쉽게 상상할 수 있다.</p>\n<h4>컴포넌트 기반</h4>\n<p>코드를 묶어둔 컴포넌트 단위로 구현되어 실제 기능을 쉽게 상상할 수 있다.\n장점은 독립성, 재사용성에 효율적이다.\n컴포넌트를 잘 만들어 놓으면 계속 재사용이 가능해진다는 것이다.</p>\n<ul>\n<li>최상위 컴포넌트는 Root이며, 트리 구조를 형상화하여 표현할 수 있다.</li>\n</ul>\n<h4>범용성</h4>\n<p>기존에 개발하던 코드를 일부만 고쳐서 어디에든 <strong>유연</strong>하게 적용할 수 있다.</p>\n<p>리액트 네이티브와도 호환이 가능하다고 한다.</p>\n<br>\n<hr>\n<h3>JSX</h3>\n<blockquote>\n<p>JavaScript를 확장한 문법</p>\n</blockquote>\n<p>JSX는 JavaScript가 확장된 문법이지만, 브라우저가 바로 실행할 수 있는 JavaScript 코드가 아니다.\n그래서 브라우저가 이해할 수 있는 JavaScript 코드로 변환하기 위해  <strong>“Babel”</strong> 을 이용한다</p>\n<h4>Babel</h4>\n<blockquote>\n<p>JSX를 브라우저가 이해할 수 있는 JavaScript로 컴파일</p>\n</blockquote>\n<p><img src=\"/6dff66ffb97f61fc3bae7cdae6c61a23/dom_react.png\" alt=\"Chinese Salty Egg\"></p>\n<p>React에서는 DOM과 다르게 CSS, JSX 문법만을 가지고 웹 애플리케이션을 개발할 수 있다.</p>\n<p>즉, 한눈에 컴포넌트를 확인할 수 있게 되었다.</p>\n<br>\n<hr>\n<h3>React 시작하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npx create<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>app@latest 폴더이름</code></pre></div>\n<p>터미널에서 react 파일을 생성할 수 있다.</p>\n<p>프로젝트를 브라우저에 실행하고 싶다면 아래 코드를 입력하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm start</code></pre></div>\n<h3>React 파일</h3>\n<h4>index.js</h4>\n<ul>\n<li>src 폴더에 포함</li>\n<li>메인 프로그램</li>\n<li>여기에서 HTML 템플릿 및 JavaScript의 컴포넌트를 조합하여 렌더링하고 실제 표시</li>\n</ul>\n<h4>App.js</h4>\n<ul>\n<li>src 폴더에 포함</li>\n<li>컴포넌트를 정의하는 프로그램</li>\n<li>실제로 화면에 표시되는 내용 등은 여기에서 정의</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div className <span class=\"token operator\">=</span> <span class=\"token string\">\"App\"</span><span class=\"token operator\">></span> <span class=\"token operator\">...</span> 생략 <span class=\"token operator\">...</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span> div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token function\">formatName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>JSX형태로 나타낼 수 있다.</p>\n<br>\n<hr>\n<h3>JSX</h3>\n<h4>JSX 규칙</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Hello<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 보면 HelloWorld 함수에서 Hello 함수를 리턴하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> App <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 index.js파일에서 App 컴포넌트를 root라는 id 값에 부착시킨다는 뜻이다.</p>\n<p>즉, 위 코드를 실행하면 App.js가 실행될 것이다.</p>\n<p><strong>왜 jsx는 삼항연산자를 써야 할까?</strong>\nif문은 변수에 넣지 못하기 때문에 변수에 넣을 수 있는 삼항연산자를 쓰면 편리하다.</p>\n<br>\n<blockquote>\n<h3>마무리 👀</h3>\n</blockquote>\n<p>React를 처음 배워보는데, html을 따로 작성하지 않아서 매우 편리했다.\nReact에 익숙해지면 쉽게 웹사이트를 제작할 수 있을 것 같아서 좋았다.</p>","frontmatter":{"title":"[6주차] React Intro - 5일차","date":"July 29, 2022","description":null}},"previous":{"fields":{"slug":"/2022-07-28-post.md/"},"frontmatter":{"title":"Unit3 회고"}},"next":{"fields":{"slug":"/2022-08-01-post.md/"},"frontmatter":{"title":"[7주차] React SPA - 1일차"}}},"pageContext":{"id":"373e758a-633a-549c-8ba9-754a2c462ca5","previousPostId":"0cd8bf89-6884-5f1d-ab35-40d666bb2560","nextPostId":"71631cd7-3f44-55df-9364-2c162728992a"}},"staticQueryHashes":["2841359383","3257411868"]}