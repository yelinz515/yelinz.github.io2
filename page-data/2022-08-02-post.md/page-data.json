{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-08-02-post.md/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"2cc53350-7b62-52a6-8adc-e72dad29161c","excerpt":"☑️ React 프론트엔드 개발을 위한 자바스크립트 오픈소스 라이브러리 ☑️ React에서 데이터 다루는 두 가지 방법 🔹 State 내부에서 변화하는 값. 컴포넌트의 사용 중 컴포넌트 내부에서 변할 수 있는 값 ✔️ useState useState 를 호출한다는 것은 “state…","html":"<h2>☑️ React</h2>\n<blockquote>\n<p><strong>프론트엔드 개발을 위한 자바스크립트 오픈소스 라이브러리</strong></p>\n</blockquote>\n<h2>☑️ React에서 데이터 다루는 두 가지 방법</h2>\n<h3>🔹 State</h3>\n<blockquote>\n<p>내부에서 변화하는 값.</p>\n</blockquote>\n<p>컴포넌트의 사용 중 컴포넌트 내부에서 변할 수 있는 값</p>\n<h4>✔️ useState</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state 저장 변수<span class=\"token punctuation\">,</span> state 갱신 함수<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>상태 초기 값<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isChecked<span class=\"token punctuation\">,</span> setIsChecked<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>useState 를 호출한다는 것은 “state” 라는 변수를 선언하는 것과 같으며, 이 변수의 이름은 아무 이름으로 지어도 된다.</p>\n<h3>🔹 Props</h3>\n<blockquote>\n<p>외부로부터 전달받은 값</p>\n</blockquote>\n<p>함부로 변경될 수 없는 읽기 전용 객체</p>\n<br>\n<h2>☑️ React 데이터 흐름</h2>\n<h4>✔️ 상향식으로 앱을 만들기</h4>\n<p>기획자나 PM, 또는 UX 디자이너로부터 앱의 디자인을 전달받고 나면, 이를 컴포넌트 계층 구조로 나누는 것이 가장 먼저 해야 할 일이다.</p>\n<h4>✔️ 데이터는 위에서 아래로 흐른다</h4>\n<p>데이터를 전달하는 주체는 부모 컴포넌트가 된다. 이는 데이터 흐름이 <strong>하향식(top-down)</strong> 임을 의미한다.</p>\n<p>📍 사실 상태는 최소화하는 것이 가장 좋다. 상태가 많아질수록 애플리케이션은 복잡해지기 때문이다.</p>","frontmatter":{"title":"[7주차] React State & Props - 2일차","date":"August 02, 2022","description":null}},"previous":{"fields":{"slug":"/2022-08-01-post.md/"},"frontmatter":{"title":"[7주차] React SPA - 1일차"}},"next":{"fields":{"slug":"/2022-08-03-post.md/"},"frontmatter":{"title":"[7주차] React Twittler State & Props 정리- 3일차"}}},"pageContext":{"id":"2cc53350-7b62-52a6-8adc-e72dad29161c","previousPostId":"71631cd7-3f44-55df-9364-2c162728992a","nextPostId":"735da0d7-7f4d-590f-a0f6-5057b78aff52"}},"staticQueryHashes":["2841359383","3257411868"]}