{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-08-09-post/","result":{"data":{"site":{"siteMetadata":{"title":"FE Yerin Blog"}},"markdownRemark":{"id":"4fe42a4c-c824-5c63-9e11-9aeb0d6d8d82","excerpt":"React 데이터 흐름 페이지를 만들기 이전에, 컴포넌트를 먼저 만들고 조립한다. 상향식으로 앱을 만들면 테스트가 쉽고 확장성이 좋다. 단방향 데이터 흐름(one-way data flow) 상태를 최소화하는 것이 가장 좋으며, Lifting state / 하향식 데이터 흐름(Top…","html":"<h3>React 데이터 흐름</h3>\n<p>페이지를 만들기 이전에, 컴포넌트를 먼저 만들고 조립한다. 상향식으로 앱을 만들면 테스트가 쉽고 확장성이 좋다.</p>\n<h4>단방향 데이터 흐름(one-way data flow)</h4>\n<p>상태를 최소화하는 것이 가장 좋으며,</p>\n<h4>Lifting state / 하향식 데이터 흐름(Top-down data flow)</h4>\n<p>보통 state는 rendering을 위해서 component에 추가되는데,\n만약 다른 component도 함께 state를 필요로하면\n그 component들의 공통된 부모 component로 state를 끌어올린다.</p>\n<p>부모 component에서 관리하게 되는것이다. 이것이 하향식 데이터 흐름를 활용하는 방법이다.</p>\n<p><strong>장점 :\nbug가 줄고, 관리하는 로직 수정이 쉬움.</strong></p>\n<p>📍 만약 UI에서 잘못된 값이 render 된 부분을 발견한다면\n해당 data, 즉 props가 어떠한 부모 component로부터 왔는지\ncomponent tree의 상위를 탐색하여 파악할 수 있다.\n그 결과, bug를 쉽게 발견하여 고칠 수 있다.</p>","frontmatter":{"title":"[8주차] React lifting state up - 2일차","date":"August 09, 2022","description":null}},"previous":{"fields":{"slug":"/study_review/server_request/"},"frontmatter":{"title":"프론트에서 서버에 데이터 요청하기"}},"next":{"fields":{"slug":"/2022-08-10-post.md/"},"frontmatter":{"title":"State Airline"}}},"pageContext":{"id":"4fe42a4c-c824-5c63-9e11-9aeb0d6d8d82","previousPostId":"56f0b323-37d1-5710-b02e-7d8cbc489905","nextPostId":"08a328df-dbbf-569a-85d6-b3a6e658863b"}},"staticQueryHashes":["2841359383","3257411868"]}