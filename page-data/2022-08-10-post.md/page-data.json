{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-08-10-post.md/","result":{"data":{"site":{"siteMetadata":{"title":"FE Yerin Blog"}},"markdownRemark":{"id":"08a328df-dbbf-569a-85d6-b3a6e658863b","excerpt":"State Airline 시작하기 useEffect \n두 번째 전달인자인 종속성이 없으면 첫번째 전달인자인 함수를 _______________ 실행한다. 처음 컴포넌트가 생성될 때 props가 변경될 때 state가 변경될 때 promise Promise…","html":"<h2>State Airline 시작하기</h2>\n<h3>useEffect</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">useEffect(함수, []) // 처음만 실행</code></pre></div>\n<p><code class=\"language-text\">useEffect(함수)</code>\n두 번째 전달인자인 종속성이 없으면 첫번째 전달인자인 함수를 _______________ 실행한다.</p>\n<ul>\n<li>처음 컴포넌트가 생성될 때</li>\n<li>props가 변경될 때</li>\n<li>state가 변경될 때</li>\n</ul>\n<h3>promise</h3>\n<p>Promise <code class=\"language-text\">resolve()</code>에 있는 데이터를 접근하려면 <code class=\"language-text\">.then</code> 사용</p>\n<p>예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> aa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h2>State Airline</h2>\n<h3>LoadingIndicator.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">LoadingIndicator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>img\n      className<span class=\"token operator\">=</span><span class=\"token string\">\"loading-indicator\"</span>\n      alt<span class=\"token operator\">=</span><span class=\"token string\">\"now loading...\"</span>\n      src<span class=\"token operator\">=</span><span class=\"token string\">\"loading.gif\"</span>\n      style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token string\">'1rem'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LoadingIndicator<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">&lt;LoadingIndicator /></code> 라는 로딩 화면 구현은 사용자에게 중요하다. 개발자라면 이 부분에 대해서 관대해지면 안된다. 구현해 주는 것이 좋겠다.</p>\n<p><img src=\"/6ecec75d18c07727372352ecc77ad605/loading.gif\" alt=\"Chinese Salty Egg\"></p>\n<h3>Main.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getFlight</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token comment\">//condition으로 newPromise의 flitered를 사용한다.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filter</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setFlightList</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span> <span class=\"token comment\">//filighlist에 데이터를 담고</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 로딩 끄기</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>condition<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">.then</code> 밖에 <code class=\"language-text\">setIsLoading(false);</code> 선언되어 있는데 실행은 되지만 <code class=\"language-text\">.then</code>이 끝날 때까지 기다리지 않기 때문에 <code class=\"language-text\">setIsLoading(false);</code>을 바로 실행이 된다.</p>\n<p>그렇기 때문에 <code class=\"language-text\">setIsLoading(false);</code>을 <code class=\"language-text\">.then</code>안에 넣어줘야 하는 것이다.</p>\n<p><strong>Main.js</strong> 전체 코드는 이렇다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Head <span class=\"token keyword\">from</span> <span class=\"token string\">'next/head'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getFlight <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../api/FlightDataApi'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> FlightList <span class=\"token keyword\">from</span> <span class=\"token string\">'./component/FlightList'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> LoadingIndicator <span class=\"token keyword\">from</span> <span class=\"token string\">'./component/LoadingIndicator'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Search <span class=\"token keyword\">from</span> <span class=\"token string\">'./component/Search'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Debug <span class=\"token keyword\">from</span> <span class=\"token string\">'./component/Debug'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 후반 테스트를 진행할 때 아래 import를 삭제합니다.</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 항공편 검색 조건을 담고 있는 상태</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>condition<span class=\"token punctuation\">,</span> setCondition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">departure</span><span class=\"token operator\">:</span> <span class=\"token string\">'ICN'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>flightList<span class=\"token punctuation\">,</span> setFlightList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 주어진 검색 키워드에 따라 condition 상태를 변경시켜주는 함수</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> departure<span class=\"token punctuation\">,</span> destination <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      condition<span class=\"token punctuation\">.</span>departure <span class=\"token operator\">!==</span> departure <span class=\"token operator\">||</span>\n      condition<span class=\"token punctuation\">.</span>destination <span class=\"token operator\">!==</span> destination\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'condition 상태를 변경시킵니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// TODO: search 함수가 전달 받아온 '항공편 검색 조건' 인자를 condition 상태에 적절하게 담아보세요.</span>\n      <span class=\"token function\">setCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>departure<span class=\"token punctuation\">,</span> destination<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filterByCondition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">flight</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> pass <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">.</span>departure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      pass <span class=\"token operator\">=</span> pass <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span>departure <span class=\"token operator\">===</span> condition<span class=\"token punctuation\">.</span>departure<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      pass <span class=\"token operator\">=</span> pass <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span>destination <span class=\"token operator\">===</span> condition<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> pass<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  global<span class=\"token punctuation\">.</span>search <span class=\"token operator\">=</span> search<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행에는 전혀 지장이 없지만, 테스트를 위해 필요한 코드입니다. 이 코드는 지우지 마세요!</span>\n\n  <span class=\"token comment\">// TODO: Effeck Hook을 이용해 AJAX 요청을 보내보세요.</span>\n  <span class=\"token comment\">// TODO: 더불어, 네트워크 요청이 진행됨을 보여주는 로딩 컴포넌트(&lt;LoadingIndicator/>)를 제공해보세요.</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getFlight</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token comment\">//condition으로 newPromise의 flitered를 사용한다.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filter</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setFlightList</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span> <span class=\"token comment\">//filighlist에 데이터를 담고</span>\n      <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 로딩 끄기</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>condition<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// TODO: 테스트 케이스의 지시에 따라 search 함수를 Search 컴포넌트로 내려주세요.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Head<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>States Airline<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"icon\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"/favicon.ico\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Head<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>main<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>여행가고 싶을 땐<span class=\"token punctuation\">,</span> States Airline<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Search onSearch<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>search<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"table\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"row-header\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col\"</span><span class=\"token operator\">></span>출발<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col\"</span><span class=\"token operator\">></span>도착<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col\"</span><span class=\"token operator\">></span>출발 시각<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col\"</span><span class=\"token operator\">></span>도착 시각<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token comment\">/* &lt;FlightList list={flightList.filter(filterByCondition)} /> */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">{</span>isLoading <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>LoadingIndicator <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>FlightList list<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>flightList<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"debug-area\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Debug condition<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>condition<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>img id<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"codestates-logo.png\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>FlightDataApi.js</h3>\n<p><strong>Main.js</strong>를 보면 <code class=\"language-text\">getFlight(condition)</code>는 아래와 같이 <strong>FlightDataApi.js</strong>에 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getFlight <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../api/FlightDataApi'</span></code></pre></div>\n<h3>FlightDataApi.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> flightList <span class=\"token keyword\">from</span> <span class=\"token string\">'../resource/flightList'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> fetch <span class=\"token keyword\">from</span> <span class=\"token string\">'node-fetch'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// localStorage'에 정보를 저장</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flight'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>flightList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// filterBy = ()는 디폴트 값</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getFlight</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filterBy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// HINT: 가장 마지막 테스트를 통과하기 위해, fetch를 이용합니다. 아래 구현은 완전히 삭제되어도 상관없습니다.</span>\n  <span class=\"token comment\">// TODO: 아래 구현을 REST API 호출로 대체하세요.</span>\n\n  <span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    json <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flight'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> flight <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//filtered 배열이다</span>\n    <span class=\"token keyword\">const</span> filtered <span class=\"token operator\">=</span> flight<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flight</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterBy<span class=\"token punctuation\">.</span>departure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        condition <span class=\"token operator\">=</span> condition <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span>departure <span class=\"token operator\">===</span> filterBy<span class=\"token punctuation\">.</span>departure<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterBy<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        condition <span class=\"token operator\">=</span> condition <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span>destination <span class=\"token operator\">===</span> filterBy<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> condition<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>filtered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위 코드를 보면 우리는 <strong>flightList.js</strong>에서 데이터를 가져오고 있다.</p>\n<br>\n<p><strong>이제 하드코딩 된 flightList JSON을 사용하지 않고\nREST API를 호출해 똑같이 실행해보겠다.</strong></p>\n<h4>1.</h4>\n<p>내가 써 본 방법은 두 가지 이다.</p>\n<p>첫번째로는 어차피 출발지는 <code class=\"language-text\">ICN</code>으로 고정되어 있기 때문에 destination만 검색해도 결과값을 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// 1.</span>\n  <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://ec2-13-124-90-231.ap-northeast-2.compute.amazonaws.com:81/flight?departure=ICN</span><span class=\"token template-punctuation string\">`</span></span>\n  \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>filterBy<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    url <span class=\"token operator\">=</span> url <span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;destination=\"</span> <span class=\"token operator\">+</span> filterBy<span class=\"token punctuation\">.</span>destination\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span> <span class=\"token operator\">=></span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>기존 endpoint에서 출발지를 추가해서 변수 <code class=\"language-text\">url</code>을 만들고, 조건문으로 도착지를 추가해주면 된다.</p>\n<p>마지막에 StatesAirline 서버에서 항공편 정보를 요청(fetch)을 하면 된다.</p>\n<h4>2.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">//2</span>\n  <span class=\"token keyword\">let</span> emstring <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterBy<span class=\"token punctuation\">.</span>departure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    emstring <span class=\"token operator\">=</span> emstring <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">departure=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filterBy<span class=\"token punctuation\">.</span>departure<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filterBy<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    emstring <span class=\"token operator\">=</span> emstring <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">destination=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filterBy<span class=\"token punctuation\">.</span>destination<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://ec2-13-124-90-231.ap-northeast-2.compute.amazonaws.com:81/flight?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>emstring<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span> <span class=\"token operator\">=></span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>1.</strong> 보다 더 복잡하다.\n<code class=\"language-text\">emstring</code>이라는 빈 문자열에 출발지와 도착지를 추가하면 된다.</p>\n<p>그리고 <code class=\"language-text\">url</code> 변수에 출발지와 도착지를 넣은 <code class=\"language-text\">emstring</code>를 추가하면 된다.</p>\n<p>마지막은 똑같이 StatesAirline 서버에서 항공편 정보를 요청(fetch)하면 된다.</p>\n<p><strong>Main.js</strong>에서 <code class=\"language-text\">useEffect()</code>를 사용한 이유이다.</p>","frontmatter":{"title":"State Airline","date":"August 10, 2022","description":null}},"previous":{"fields":{"slug":"/2022-08-09-post/"},"frontmatter":{"title":"[8주차] React lifting state up - 2일차"}},"next":{"fields":{"slug":"/2022-08-11-post.md/"},"frontmatter":{"title":"[8주차] [Web Server] 기초 - 4일차"}}},"pageContext":{"id":"08a328df-dbbf-569a-85d6-b3a6e658863b","previousPostId":"4fe42a4c-c824-5c63-9e11-9aeb0d6d8d82","nextPostId":"ae379aa9-a274-587c-a3b5-5652f7c6dd4c"}},"staticQueryHashes":["2841359383","3257411868"]}