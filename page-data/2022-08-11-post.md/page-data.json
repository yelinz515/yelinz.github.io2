{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-08-11-post.md/","result":{"data":{"site":{"siteMetadata":{"title":"FE Yerin Blog"}},"markdownRemark":{"id":"ae379aa9-a274-587c-a3b5-5652f7c6dd4c","excerpt":"API 서버는 프론트엔드 개발자도 구현할 줄 알아야 한다. 새로운 서비스를 만들려고 해도, 필요한 데이터를 저장하거나 불러오는 기본적인 API 서버를 구현할 수 없다면 아무런 동적 활동을 할 수 없는 클라이언트만 구현될 수 밖에 없다. SOP가 생겨난 이유 OP…","html":"<p>API 서버는 프론트엔드 개발자도 구현할 줄 알아야 한다. 새로운 서비스를 만들려고 해도, 필요한 데이터를 저장하거나 불러오는 기본적인 API 서버를 구현할 수 없다면 아무런 동적 활동을 할 수 없는 클라이언트만 구현될 수 밖에 없다.</p>\n<h3>SOP가 생겨난 이유</h3>\n<p>OP은 애초에 다른 사이트와의 리소스 공유를 제한하기 때문에 해킹 등의 위협에서 보다 더 안전해질 수 있다. 모든 브라우저에서 기본적으로 사용하고 있는 정책이다.</p>\n<h3>CORS</h3>\n<p><strong>Cross-Origin Resource Sharing의 줄임말로 교차 출처 리소스 공유를 뜻한다.</strong></p>\n<p>추가 HTTP 헤더를 사용하여, 한 출처에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 <strong>접근할 수 있는 권한을 부여</strong>하도록 브라우저에 알려주는 체제이다.</p>\n<h4>✔️ CORS 동작 방식</h4>\n<ol>\n<li>프리플라이트 요청 (Preflight Request)</li>\n<li>인증정보를 포함한 요청 (Credentialed Request)\n이 경우에는 프론트, 서버 양측 모두 CORS 설정이 필요하다.</li>\n</ol>\n<br>\n<h3>Node.js HTTP</h3>\n<h3>Express</h3>\n<p>Express로 구현한 서버가 Node.js HTTP 모듈로 작성한 서버와 다른 점:</p>\n<ol>\n<li>미들웨어를 추가할 수 있다.</li>\n<li>라우터를 제공한다.</li>\n</ol>\n<h4>✔️ 미들웨어를 사용하는 상황</h4>\n<ol>\n<li>POST 요청 등에 포함된 body(payload)를 구조화할 때(쉽게 얻어내고자 할 때)</li>\n<li>모든 요청/응답에 CORS 헤더를 붙여야 할 때</li>\n<li>모든 요청에 대해 url이나 메서드를 확인할 때</li>\n<li>요청 헤더에 사용자 인증 정보가 담겨있는지 확인할 때</li>\n</ol>\n<p>📍</p>\n<br>\n<blockquote>\n<h3>마무리 👀</h3>\n</blockquote>\n<p>지금 States Airline이라는 관련 과제를 하고 있다. 내일 part2까지 과제가 마무리되면 다음 포스트에는 과제 관련 포스트를 올려야겠다.</p>","frontmatter":{"title":"[8주차] [Web Server] 기초 - 3일차","date":"August 11, 2022","description":null}},"previous":{"fields":{"slug":"/2022-08-10-post.md/"},"frontmatter":{"title":"State Airline"}},"next":null},"pageContext":{"id":"ae379aa9-a274-587c-a3b5-5652f7c6dd4c","previousPostId":"08a328df-dbbf-569a-85d6-b3a6e658863b","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}